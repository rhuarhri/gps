/* ------------------------------------------------------------------------------------------
 *                                      DOCUMENTATION
 * ------------------------------------------------------------------------------------------
 *
 * Author: Robert Dudley (N0686602)
 *
 * The following 13 Boost test cases are designed to test the functionality of the
 * maxGradient() functions.
 *
 * The first few tests are designed to test normal, limited data
 * where either only one routepoint is present, or where certain values remain consistent
 * across routepoints.
 *
 * The next few tests analyse GPX log files where the elevation either
 * increases or decreases, and include a test where the elevation increases considerably.
 *
 * The final Boost tests are designed to check the format of the GPX log file being fed to
 * the maxGradient() function - these tests check whether particular tags are present, and
 * also help determine the application's respond when either an invalid file or non-existant
 * file is presented to the function.
 */

#include <boost/test/unit_test.hpp>

#include "logs.h"
#include "route.h"
#include "track.h"

using namespace GPS;

BOOST_AUTO_TEST_SUITE( Route_MaxGradient_N0686602 )

const bool isFileName = true;


/* Test number:         1
 * Test name:           Check maxGradient() where only one value for elevation is specified
 * Generated by:        GPX file generator
 * Test description:    This test checks for the value of maxGradient() where only one value
 *                      for elevation is provided.
 * Expected result:     The value for maxGradient() should be 0.
 */
BOOST_AUTO_TEST_CASE ( CheckWhereOneElevationValue )
{
   Route route = Route(LogFiles::GPXRoutesDir + "SingleValueTest-N0686602.gpx", isFileName);
   BOOST_CHECK_CLOSE( route.maxGradient(), 0, 0 );
}

/* Test number:         2
 * Test name:           Check maxGradient() where all elevation values are equal to zero
 * Generated by:        GPX file generator
 * Test description:    This test analyses a route where the latitude and longitude change,
 *                      but elevation doesn't.
 * Expected result:     The value for maxGradient() should be 0.
 */
BOOST_AUTO_TEST_CASE ( CheckWhereAllElevationsEqualToZero )
{
   Route route = Route(LogFiles::GPXRoutesDir + "ZeroElevationTest-N0686602.gpx", isFileName);
   BOOST_CHECK_CLOSE( route.maxGradient(), 0, 0 );
}

/* Test number:         3
 * Test name:           Check maxGradient() when the values for latitude and longitude don't
 *                      change
 * Generated by:        GPX file generator
 * Test description:    This test analyses a route where the value for elevation increases, but
 *                      the values for latitude  and longitude don't.
 * Expected result:     The value for maxGradient() should be 0.
 */
BOOST_AUTO_TEST_CASE ( CheckMaxGradientWhereNoChangeInLatOrLon )
{
   Route route = Route(LogFiles::GPXRoutesDir + "SameLatAndLongTest.gpx", isFileName);
   BOOST_CHECK_EQUAL( route.maxGradient(), 0 );
}

/* Test number:         4
 * Test name:           Check maxGradient() where a wide variety of elevation values are specified
 * Generated by:        Pre-compiled GPX file
 * Test description:    This test analyses a route where the value for elevation differs considerably
 *                      between routepoints.
 * Expected result:     The value for maxGradient() should be 1.152, within a 1% degree of accuracy.
 */
BOOST_AUTO_TEST_CASE ( VaryingPositiveElevationNorthYorkMoors )
{
   Route route = Route(LogFiles::GPXRoutesDir + "NorthYorkMoors.gpx", isFileName);
   BOOST_CHECK_CLOSE( route.maxGradient(), 1.152, 1 );
}

/* Test number:         5
 * Test name:           Check maxGradient() where elevation values increase as the route progresses
 * Generated by:        GPX file generator
 * Test description:    This test analyses a route where the elevation values generally increase.
 * Expected result:     The value for maxGradient() should be 1.0641, within a 1% degree of accuracy.
 */
BOOST_AUTO_TEST_CASE ( IncreasingElevationValues )
{
    Route route = Route(LogFiles::GPXRoutesDir + "PositiveElevationTest-N0686602.gpx", isFileName);
    BOOST_CHECK_CLOSE( route.maxGradient(), 1.0641, 1 );
}

/* Test number:         6
 * Test name:           Check maxGradient() where elevation values reduce as the route progresses
 * Generated by:        GPX file generator
 * Test description:    This test analyses a route where the elevation values generally decrease.
 * Expected result:     The value for maxGradient() should be 1.0683, within a 1% degree of accuracy.
 */
BOOST_AUTO_TEST_CASE ( ReducingElevationValues )
{
    Route route = Route(LogFiles::GPXRoutesDir + "NegativeElevationTest-N0686602.gpx", isFileName);
    BOOST_CHECK_CLOSE( route.maxGradient(), 1.0683, 1 );
}

/* Test number:         7
 * Test name:           Check maxGradient() where elevation values change considerably
 * Generated by:        GPX file generator
 * Test description:    This test analyses a route where the elevation values generally decrease.
 * Expected result:     The value for maxGradient() should be 0.241, within a 1% degree of accuracy.
 */
BOOST_AUTO_TEST_CASE ( LargeElevationValues )
{
    Route route = Route(LogFiles::GPXRoutesDir + "LargeElevationTest-N0686602.gpx", isFileName);
    BOOST_CHECK_CLOSE( route.maxGradient(), 0.241, 1 );
}

/* Test number:         8
 * Test name:           Check maxGradient() where no value for latitude is specified
 * Generated by:        Manually
 * Test description:    This test analyses a GPX file where no value for latitude is provided.
 * Expected result:     An std::domain_error exception should be thrown.
 */
BOOST_AUTO_TEST_CASE ( NoLatitudeSpecified )
{
    Route route = Route(LogFiles::GPXRoutesDir + "NoLatTest-N0686602.gpx", isFileName);
    BOOST_CHECK_THROW( route.maxGradient(), std::domain_error );
}

/* Test number:         9
 * Test name:           Check maxGradient() where only no value for longitude is specified
 * Generated by:        Manually
 * Test description:    This test analyses a GPX file where no value for longitude is provided.
 * Expected result:     An std::domain_error exception should be thrown.
 */
BOOST_AUTO_TEST_CASE ( NoLongitudeSpecified )
{
    Route route = Route(LogFiles::GPXRoutesDir + "NoLongTest-N0686602.gpx", isFileName);
    BOOST_CHECK_THROW( route.maxGradient(), std::domain_error );
}

/* Test number:         10
 * Test name:           Check maxGradient() where only no values for latitude or longitude are specified
 * Generated by:        Manually
 * Test description:    This test analyses a GPX file where no value for either latitude or longitude
 *                      are provided.
 * Expected result:     An std::domain_error exception should be thrown.
 */
BOOST_AUTO_TEST_CASE ( NoLatitudeOrLongitudeSpecified )
{
    Route route = Route(LogFiles::GPXRoutesDir + "NoLatOrLongTest-N0686602.gpx", isFileName);
    BOOST_CHECK_THROW( route.maxGradient(), std::domain_error );
}

/* Test number:         11
 * Test name:           Check maxGradient() where elevation values are given as a string
 * Generated by:        Manually
 * Test description:    This test analyses as GPX file  where the value for elevation is given as a string
 *                      as opposed to a numeric value.
 * Expected result:     An std::invalid_argument exception should be thrown.
 */
BOOST_AUTO_TEST_CASE ( InvalidValuesForElevation )
{
    Route route = Route(LogFiles::GPXRoutesDir + "InvalidInputTest-N0686602.gpx", isFileName);
    BOOST_CHECK_THROW ( route.maxGradient(), std::invalid_argument );
}

/* Test number:         12
 * Test name:           Check maxGradient() on a file incorrectly generated by the GPX file generator
 * Generated by:        GPX file generator
 * Test description:    This test analyses a GPX file incorrectly generated by the GPX file generator.
 * Expected result:     Since the file is blank, and no data can be found, an std::domain_error exception
 *                      should be thrown.
 */
BOOST_AUTO_TEST_CASE ( BlankFileSpecified )
{
    Route route = Route(LogFiles::GPXRoutesDir + "BlankTest-N0686602.gpx", isFileName);
    BOOST_CHECK_THROW( route.maxGradient(), std::domain_error );
}

/* Test number:         13
 * Test name:           Check maxGradient() on a non-existant GPX file
 * Generated by:        N/A
 * Test description:    This test attempts to analyse a non-existant GPX file.
 * Expected result:     An std::invalid_argument exception should be thrown.
 */
BOOST_AUTO_TEST_CASE( NonExistantFileSpecified )
{
    Route route = Route(LogFiles::GPXRoutesDir + "NotAFile.gpx", isFileName);
    BOOST_CHECK_THROW( route.maxGradient(), std::invalid_argument );
}

BOOST_AUTO_TEST_SUITE_END()
